local data = require ("main.data")

local DRAG = 0.1
local ACCEL = 0.2
local SPEED_MAX = 1
local BLINK_TIME = 500

function init(self)
	msg.post(".", "acquire_input_focus")
	self.correction = vmath.vector3()
	self.vel = vmath.vector3()
	self.tails = 0
	self.blink = 0
	self.pills = 0
	self.damage = false
	self.damagevol = 0
	data.energy = 100
	data.state = data.STATE_PLAYING
	
	for n = 1, data.TAILBUF_LEN do
		data.tailbuf[n] = vmath.vector3(0,0,0)
	end

	msg.post("main:/sound#damage", "play_sound", {gain = 0.0})
end

local function move(self)
	local pos = go.get_position()
	pos = pos + self.vel
	go.set_position(pos)
	msg.post("view", "look_at", {position = pos})
end

local function drag(self)
	if self.vel.x > 0 then self.vel.x = self.vel.x - DRAG
		if self.vel.x < 0 then self.vel.x = 0 end
	elseif self.vel.x < 0 then self.vel.x = self.vel.x + DRAG
		if self.vel.x > 0 then self.vel.x = 0 end
	end

	if self.vel.y > 0 then self.vel.y = self.vel.y - DRAG
		if self.vel.y < 0 then self.vel.y = 0 end
	elseif self.vel.y < 0 then self.vel.y = self.vel.y + DRAG
		if self.vel.y > 0 then self.vel.y = 0 end
	end
end

local function tail(self)
	table.remove(data.tailbuf, 1)
	table.insert(data.tailbuf, go.get_position())
end

local function addtail(self)
	local pos = go.get_position()
	self.tails = self.tails + 1
	factory.create("#tail_factory", nil, nil, {num = self.tails})
end

local function levelclear(self)
	msg.post("main:/sound#clear", "play_sound")

	if data.level < 8 then
		data.state = data.STATE_LEVELCLEAR
		msg.post("view#levelclear", "show", {})
	else
		data.state = data.STATE_COMPLETE
		msg.post("view#complete", "show", {})
		data.maxlevel = 1
	end
end

local function scan(self)
	local pos = data.world2tile(go.get_position())
	local t = tilemap.get_tile("/level#tilemap", "control", pos.x, pos.y)
	if t == 2 then
		tilemap.set_tile("/level#tilemap", "control", pos.x, pos.y, 0)
		msg.post("main:/sound#pickup", "play_sound")
		self.pills = self.pills + 1
		if self.pills == data.maxpills then
			msg.post("/level#script", "openexit", {})
			msg.post("main:/sound#open", "play_sound")
			msg.post("view#notify", "show", {text = "EXIT OPEN!"})
		end
		addtail(self)
	elseif t == 4 then
		levelclear(self)
	elseif t == 7 then
		tilemap.set_tile("/level#tilemap", "control", pos.x, pos.y, 0)
		msg.post("main:/sound#squelch", "play_sound")
		msg.post("view#notify", "show", {text = "ENERGY LEVEL RESTORED TO 100%"})
		data.energy = 100
	end
end

local function anim(self)
	self.blink = self.blink + 1
	if self.blink >= BLINK_TIME-5 and self.blink < BLINK_TIME then
		msg.post("#sprite", "play_animation", {id = hash("blink")})
	elseif self.blink >= BLINK_TIME then
		self.blink = 0
	elseif self.vel.x < 0 then msg.post("#sprite", "play_animation", {id = hash("left")})
	elseif self.vel.x > 0 then msg.post("#sprite", "play_animation", {id = hash("right")})
	else msg.post("#sprite", "play_animation", {id = hash("head")})
	end
end

function update(self, dt)
	tail(self)
	anim(self)
	move(self)
	drag(self)

	if data.state == data.STATE_PLAYING then
		scan(self)

		if self.damage then
			data.energy = data.energy - 1
			self.damage = false
			self.damagevol = 1
		end
		
		if data.energy <= 0 then
			data.state = data.STATE_GAMEOVER
			msg.post("view#gameover", "show", {})
			msg.post("main:/sound#gameover", "play_sound", {gain = 1.0})
		end

		msg.post("view#gui", "update", {pills = self.pills, max = data.maxpills, energy = data.energy})
	end

	if self.damagevol > 0 then self.damagevol = self.damagevol - 0.05 end
	msg.post("main:/sound#damage", "set_gain", {gain = self.damagevol})
		
	self.correction = vmath.vector3()
end

local function collision(self, message)
	if message.distance > 0 then
		local proj = vmath.project(self.correction, message.normal * message.distance)
		if proj < 1 then
			local comp = (message.distance - message.distance * proj) * message.normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") and message.other_group == hash("world") then
		collision(self, message)
	elseif message_id == hash("position") then
		go.set_position(message.pos)
		msg.post("view", "snap_to", {position = message.pos})
	elseif message_id == hash("damage") then
		self.damage = true
	end
end

local function input_playing (self, action_id, action)
	if action_id == hash("left") then
		self.vel.x = self.vel.x - ACCEL
		if self.vel.x < -SPEED_MAX then self.vel.x = -SPEED_MAX end
	elseif action_id == hash("right") then
		self.vel.x = self.vel.x + ACCEL
		if self.vel.x > SPEED_MAX then self.vel.x = SPEED_MAX end
	elseif action_id == hash("down") then
		self.vel.y = self.vel.y - ACCEL
		if self.vel.y < -SPEED_MAX then self.vel.y = -SPEED_MAX end
	elseif action_id == hash("up") then
		self.vel.y = self.vel.y + ACCEL
		if self.vel.y > SPEED_MAX then self.vel.y = SPEED_MAX end
	end

	if action_id == hash("debug") and action.pressed then
		--levelclear(self)
	end
end

local function input_levelclear(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		data.level = data.level + 1
		if data.level < 10 then
			data.maxlevel = data.level
			msg.post("game:/loader", "new_level", {})
		else
			msg.post("view#script", "snap_to", { position = data.offset})
			msg.post("main:/handler", "show_menu")
		end
	end	
end

local function input_gameover(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		msg.post("main:/handler", "show_menu")
	end
end

function on_input(self, action_id, action)
	if data.state == data.STATE_PLAYING then
		input_playing (self, action_id, action)
	elseif data.state == data.STATE_LEVELCLEAR then
		input_levelclear(self, action_id, action)
	elseif data.state == data.STATE_GAMEOVER or data.state == data.STATE_COMPLETE then
		input_gameover(self, action_id, action)
	end
end
